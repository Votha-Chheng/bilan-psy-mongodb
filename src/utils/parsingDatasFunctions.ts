import { AnamneseRawData, AnamneseResults, BilanMedicauxRaw, BilanMedicauxResults } from "@/@types/Anamnese"
import { returnArrayIfJson } from "./arrayFunctions"

export const returnParseAnamneseResult = (anamnese: AnamneseRawData|null|undefined): AnamneseResults => {
  if(!anamnese){
    return {
      id: undefined,
      notesBrutes: null,
      proposPapaOuMaman: null,
      neant: undefined,
      ageMarche: null, 
      acquisitionLangage: null, 
      continence:null, 
      accouchement:null,
      motriciteGlobale: null,
      motriciteFine: null,
      velo: null,
      sensorialite:null,
      apprentissages: null,
      outils:null,
      ecriture:null,
      cartableBureau:null,
      relationsPairs:null,
      comportement:null,
      attention: null,
      decritAuQuotidien: null,
      sommeilQuotidien: null,
      gestionEmotions: null,
      gestionTemps: null,
      temperament:null,
      fratrie:null,
      compositionFamiliale:null,
      dossierMDPH:null,                    //<-- JSON transformé en string[] côté côté client
      maladiesEventuelles:null,
      accompagnementSuivi:null,
      autresAntecedents:null,
      handicap:null,
      confereDevPsy:null,
      grossesse:null,
      stationAssise:null,
      quadrupedie:null,
      alimentation:null,
      autresDevPsy:null,                              
      praxiesGestuelles:null,
      extraScolaire:null,
      autresMotricite:null,
      classe:null,
      cahiers:null,
      anterieur:null,
      autonomie:null,         
      ecouteConsignes:null,
      agitationMotrice:null,
      devoirs:null,
      alimentationQuotidien:null,
      autresQuotidien:null
      }
    } 

    const {
      id,
      ageMarche,
      acquisitionLangage,
      continence,
      accouchement,
      motriciteGlobale,
      motriciteFine,
      velo,
      sensorialite,
      apprentissages,
      outils,
      ecriture,
      cartableBureau,
      relationsPairs,
      comportement,
      attention,
      decritAuQuotidien,
      sommeilQuotidien,
      gestionEmotions,
      gestionTemps,
      temperament,
      notesBrutes,
      proposPapaOuMaman,
      fratrie,
      compositionFamiliale,
      neant,
      dossierMDPH,
      maladiesEventuelles,
      accompagnementSuivi,
      autresAntecedents,
      handicap,
      confereDevPsy,
      grossesse,
      stationAssise,
      quadrupedie,
      alimentation,
      autresDevPsy,                              
      praxiesGestuelles,
      extraScolaire,
      autresMotricite,  
      classe,
      cahiers,
      anterieur,
      autonomie,           
      ecouteConsignes,
      agitationMotrice,
      devoirs,
      alimentationQuotidien,
      autresQuotidien,
    } = anamnese ?? {}

  return {
    id,
    notesBrutes,
    proposPapaOuMaman,
    neant,
    ageMarche: returnArrayIfJson(ageMarche ?? null), 
    acquisitionLangage: returnArrayIfJson(acquisitionLangage), 
    continence: returnArrayIfJson(continence), 
    accouchement: returnArrayIfJson(accouchement),
    motriciteGlobale: returnArrayIfJson(motriciteGlobale),
    motriciteFine: returnArrayIfJson(motriciteFine),
    velo: returnArrayIfJson(velo),
    sensorialite: returnArrayIfJson(sensorialite),
    apprentissages: returnArrayIfJson(apprentissages),
    outils: returnArrayIfJson(outils),
    ecriture: returnArrayIfJson(ecriture),
    cartableBureau: returnArrayIfJson(cartableBureau),
    relationsPairs: returnArrayIfJson(relationsPairs),
    comportement: returnArrayIfJson(comportement),
    attention: returnArrayIfJson(attention),
    decritAuQuotidien: returnArrayIfJson(decritAuQuotidien),
    sommeilQuotidien: returnArrayIfJson(sommeilQuotidien),
    gestionEmotions: returnArrayIfJson(gestionEmotions),
    gestionTemps: returnArrayIfJson(gestionTemps),
    temperament: returnArrayIfJson(temperament),
    fratrie,
    compositionFamiliale,
    dossierMDPH: returnArrayIfJson(dossierMDPH),                    //<-- JSON transformé en string[] côté côté client
    maladiesEventuelles,
    accompagnementSuivi,
    autresAntecedents,
    handicap,
    confereDevPsy,
    grossesse,
    stationAssise,
    quadrupedie,
    alimentation,
    autresDevPsy,                              
    praxiesGestuelles,
    extraScolaire,
    autresMotricite,
    classe,
    cahiers,
    anterieur,
    autonomie,         
    ecouteConsignes,
    agitationMotrice,
    devoirs,
    alimentationQuotidien,
    autresQuotidien
  }
}

export const returnParseBilanMedicauxResults = (bilanMedicauxRaw: BilanMedicauxRaw|null|undefined): BilanMedicauxResults => {
  if(!bilanMedicauxRaw){
    return {
      id: undefined,
      anamneseId: undefined,
      bilanNeuropediatre: undefined,
      bilanNeuropsy: undefined,
      bilanORL: undefined,
      bilanOphtalmo: undefined,
      bilanOrthophonique: undefined,
      bilanOrthoptique: undefined,
      selectedBilans: undefined
    }
  }

  const {bilanNeuropediatre, bilanNeuropsy, bilanORL, bilanOphtalmo, bilanOrthophonique, bilanOrthoptique, selectedBilans} = bilanMedicauxRaw
  const bilansParsed: BilanMedicauxResults = {
    id: bilanMedicauxRaw.id,
    anamneseId: bilanMedicauxRaw.anamneseId,
    bilanNeuropediatre: returnArrayIfJson(bilanNeuropediatre ?? null) ?? undefined,
    bilanNeuropsy: returnArrayIfJson(bilanNeuropsy ?? null) ?? undefined,
    bilanORL: returnArrayIfJson(bilanORL ?? null) ?? undefined,
    bilanOphtalmo: returnArrayIfJson(bilanOphtalmo ?? null) ?? undefined,
    bilanOrthophonique: returnArrayIfJson(bilanOrthophonique ?? null) ?? undefined,
    bilanOrthoptique: returnArrayIfJson(bilanOrthoptique ?? null) ?? undefined,
    selectedBilans: returnArrayIfJson(selectedBilans ?? null) ?? undefined
  }

  return bilansParsed
}
